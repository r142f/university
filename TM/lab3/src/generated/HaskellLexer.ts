// Generated from Haskell.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class HaskellLexer extends Lexer {
	public static readonly TYPE = 1;
	public static readonly LITERAL = 2;
	public static readonly NAME = 3;
	public static readonly STRING = 4;
	public static readonly DOUBLE = 5;
	public static readonly INT = 6;
	public static readonly BOOL = 7;
	public static readonly LP = 8;
	public static readonly RP = 9;
	public static readonly COMMA = 10;
	public static readonly PLUS = 11;
	public static readonly MINUS = 12;
	public static readonly DIV = 13;
	public static readonly MUL = 14;
	public static readonly MOD = 15;
	public static readonly OR = 16;
	public static readonly AND = 17;
	public static readonly LT = 18;
	public static readonly LTE = 19;
	public static readonly GT = 20;
	public static readonly GTE = 21;
	public static readonly EQ = 22;
	public static readonly NEQ = 23;
	public static readonly DCOLON = 24;
	public static readonly IMPLIES = 25;
	public static readonly VBAR = 26;
	public static readonly EQUALS = 27;
	public static readonly NEWLINE = 28;
	public static readonly WHITESPACE = 29;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"TYPE", "LITERAL", "NAME", "STRING", "DOUBLE", "INT", "BOOL", "LP", "RP", 
		"COMMA", "PLUS", "MINUS", "DIV", "MUL", "MOD", "OR", "AND", "LT", "LTE", 
		"GT", "GTE", "EQ", "NEQ", "DCOLON", "IMPLIES", "VBAR", "EQUALS", "NEWLINE", 
		"WHITESPACE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, "'('", "')'", "','", "'+'", "'-'", "'/'", "'*'", "'%'", "'||'", 
		"'&&'", "'<'", "'<='", "'>'", "'>='", "'=='", "'/='", "'::'", "'->'", 
		"'|'", "'='",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "TYPE", "LITERAL", "NAME", "STRING", "DOUBLE", "INT", "BOOL", 
		"LP", "RP", "COMMA", "PLUS", "MINUS", "DIV", "MUL", "MOD", "OR", "AND", 
		"LT", "LTE", "GT", "GTE", "EQ", "NEQ", "DCOLON", "IMPLIES", "VBAR", "EQUALS", 
		"NEWLINE", "WHITESPACE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(HaskellLexer._LITERAL_NAMES, HaskellLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return HaskellLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(HaskellLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Haskell.g4"; }

	// @Override
	public get ruleNames(): string[] { return HaskellLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return HaskellLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return HaskellLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return HaskellLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1F\xC0\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x05\x02Q\n\x02\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x05\x03W\n\x03\x03\x04\x03\x04\x07\x04[\n\x04\f\x04\x0E" +
		"\x04^\v\x04\x03\x05\x03\x05\x07\x05b\n\x05\f\x05\x0E\x05e\v\x05\x03\x05" +
		"\x03\x05\x03\x06\x03\x06\x03\x06\x07\x06l\n\x06\f\x06\x0E\x06o\v\x06\x05" +
		"\x06q\n\x06\x03\x07\x05\x07t\n\x07\x03\x07\x06\x07w\n\x07\r\x07\x0E\x07" +
		"x\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\x84\n\b" +
		"\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03" +
		"\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03" +
		"\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03" +
		"\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03" +
		"\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03" +
		"\x1C\x03\x1D\x05\x1D\xB7\n\x1D\x03\x1D\x03\x1D\x06\x1D\xBB\n\x1D\r\x1D" +
		"\x0E\x1D\xBC\x03\x1E\x03\x1E\x03c\x02\x02\x1F\x03\x02\x03\x05\x02\x04" +
		"\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v" +
		"\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!" +
		"\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x19" +
		"1\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F\x03\x02\x06\x05" +
		"\x02C\\aac|\x07\x02))2;C\\aac|\x03\x022;\x04\x02\v\v\"\"\x02\xCF\x02\x03" +
		"\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t" +
		"\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03" +
		"\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03" +
		"\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03" +
		"\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03" +
		"\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02" +
		"\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02" +
		"/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02" +
		"\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02" +
		"\x03P\x03\x02\x02\x02\x05V\x03\x02\x02\x02\x07X\x03\x02\x02\x02\t_\x03" +
		"\x02\x02\x02\vh\x03\x02\x02\x02\rs\x03\x02\x02\x02\x0F\x83\x03\x02\x02" +
		"\x02\x11\x85\x03\x02\x02\x02\x13\x87\x03\x02\x02\x02\x15\x89\x03\x02\x02" +
		"\x02\x17\x8B\x03\x02\x02\x02\x19\x8D\x03\x02\x02\x02\x1B\x8F\x03\x02\x02" +
		"\x02\x1D\x91\x03\x02\x02\x02\x1F\x93\x03\x02\x02\x02!\x95\x03\x02\x02" +
		"\x02#\x98\x03\x02\x02\x02%\x9B\x03\x02\x02\x02\'\x9D\x03\x02\x02\x02)" +
		"\xA0\x03\x02\x02\x02+\xA2\x03\x02\x02\x02-\xA5\x03\x02\x02\x02/\xA8\x03" +
		"\x02\x02\x021\xAB\x03\x02\x02\x023\xAE\x03\x02\x02\x025\xB1\x03\x02\x02" +
		"\x027\xB3\x03\x02\x02\x029\xBA\x03\x02\x02\x02;\xBE\x03\x02\x02\x02=>" +
		"\x07D\x02\x02>?\x07q\x02\x02?@\x07q\x02\x02@Q\x07n\x02\x02AB\x07K\x02" +
		"\x02BC\x07p\x02\x02CQ\x07v\x02\x02DE\x07F\x02\x02EF\x07q\x02\x02FG\x07" +
		"w\x02\x02GH\x07d\x02\x02HI\x07n\x02\x02IQ\x07g\x02\x02JK\x07U\x02\x02" +
		"KL\x07v\x02\x02LM\x07t\x02\x02MN\x07k\x02\x02NO\x07p\x02\x02OQ\x07i\x02" +
		"\x02P=\x03\x02\x02\x02PA\x03\x02\x02\x02PD\x03\x02\x02\x02PJ\x03\x02\x02" +
		"\x02Q\x04\x03\x02\x02\x02RW\x05\x0F\b\x02SW\x05\r\x07\x02TW\x05\v\x06" +
		"\x02UW\x05\t\x05\x02VR\x03\x02\x02\x02VS\x03\x02\x02\x02VT\x03\x02\x02" +
		"\x02VU\x03\x02\x02\x02W\x06\x03\x02\x02\x02X\\\t\x02\x02\x02Y[\t\x03\x02" +
		"\x02ZY\x03\x02\x02\x02[^\x03\x02\x02\x02\\Z\x03\x02\x02\x02\\]\x03\x02" +
		"\x02\x02]\b\x03\x02\x02\x02^\\\x03\x02\x02\x02_c\x07$\x02\x02`b\v\x02" +
		"\x02\x02a`\x03\x02\x02\x02be\x03\x02\x02\x02cd\x03\x02\x02\x02ca\x03\x02" +
		"\x02\x02df\x03\x02\x02\x02ec\x03\x02\x02\x02fg\x07$\x02\x02g\n\x03\x02" +
		"\x02\x02hp\x05\r\x07\x02im\x070\x02\x02jl\t\x04\x02\x02kj\x03\x02\x02" +
		"\x02lo\x03\x02\x02\x02mk\x03\x02\x02\x02mn\x03\x02\x02\x02nq\x03\x02\x02" +
		"\x02om\x03\x02\x02\x02pi\x03\x02\x02\x02pq\x03\x02\x02\x02q\f\x03\x02" +
		"\x02\x02rt\x07/\x02\x02sr\x03\x02\x02\x02st\x03\x02\x02\x02tv\x03\x02" +
		"\x02\x02uw\t\x04\x02\x02vu\x03\x02\x02\x02wx\x03\x02\x02\x02xv\x03\x02" +
		"\x02\x02xy\x03\x02\x02\x02y\x0E\x03\x02\x02\x02z{\x07h\x02\x02{|\x07c" +
		"\x02\x02|}\x07n\x02\x02}~\x07u\x02\x02~\x84\x07g\x02\x02\x7F\x80\x07v" +
		"\x02\x02\x80\x81\x07t\x02\x02\x81\x82\x07w\x02\x02\x82\x84\x07g\x02\x02" +
		"\x83z\x03\x02\x02\x02\x83\x7F\x03\x02\x02\x02\x84\x10\x03\x02\x02\x02" +
		"\x85\x86\x07*\x02\x02\x86\x12\x03\x02\x02\x02\x87\x88\x07+\x02\x02\x88" +
		"\x14\x03\x02\x02\x02\x89\x8A\x07.\x02\x02\x8A\x16\x03\x02\x02\x02\x8B" +
		"\x8C\x07-\x02\x02\x8C\x18\x03\x02\x02\x02\x8D\x8E\x07/\x02\x02\x8E\x1A" +
		"\x03\x02\x02\x02\x8F\x90\x071\x02\x02\x90\x1C\x03\x02\x02\x02\x91\x92" +
		"\x07,\x02\x02\x92\x1E\x03\x02\x02\x02\x93\x94\x07\'\x02\x02\x94 \x03\x02" +
		"\x02\x02\x95\x96\x07~\x02\x02\x96\x97\x07~\x02\x02\x97\"\x03\x02\x02\x02" +
		"\x98\x99\x07(\x02\x02\x99\x9A\x07(\x02\x02\x9A$\x03\x02\x02\x02\x9B\x9C" +
		"\x07>\x02\x02\x9C&\x03\x02\x02\x02\x9D\x9E\x07>\x02\x02\x9E\x9F\x07?\x02" +
		"\x02\x9F(\x03\x02\x02\x02\xA0\xA1\x07@\x02\x02\xA1*\x03\x02\x02\x02\xA2" +
		"\xA3\x07@\x02\x02\xA3\xA4\x07?\x02\x02\xA4,\x03\x02\x02\x02\xA5\xA6\x07" +
		"?\x02\x02\xA6\xA7\x07?\x02\x02\xA7.\x03\x02\x02\x02\xA8\xA9\x071\x02\x02" +
		"\xA9\xAA\x07?\x02\x02\xAA0\x03\x02\x02\x02\xAB\xAC\x07<\x02\x02\xAC\xAD" +
		"\x07<\x02\x02\xAD2\x03\x02\x02\x02\xAE\xAF\x07/\x02\x02\xAF\xB0\x07@\x02" +
		"\x02\xB04\x03\x02\x02\x02\xB1\xB2\x07~\x02\x02\xB26\x03\x02\x02\x02\xB3" +
		"\xB4\x07?\x02\x02\xB48\x03\x02\x02\x02\xB5\xB7\x07\x0F\x02\x02\xB6\xB5" +
		"\x03\x02\x02\x02\xB6\xB7\x03\x02\x02\x02\xB7\xB8\x03\x02\x02\x02\xB8\xBB" +
		"\x07\f\x02\x02\xB9\xBB\x07\x0F\x02\x02\xBA\xB6\x03\x02\x02\x02\xBA\xB9" +
		"\x03\x02\x02\x02\xBB\xBC\x03\x02\x02\x02\xBC\xBA\x03\x02\x02\x02\xBC\xBD" +
		"\x03\x02\x02\x02\xBD:\x03\x02\x02\x02\xBE\xBF\t\x05\x02\x02\xBF<\x03\x02" +
		"\x02\x02\x0F\x02PV\\cmpsx\x83\xB6\xBA\xBC\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!HaskellLexer.__ATN) {
			HaskellLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(HaskellLexer._serializedATN));
		}

		return HaskellLexer.__ATN;
	}

}

